name: CI

on:
  push:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: eu-west-2
  ECS_CLUSTER_NAME: uima
  ECS_SERVICE_NAME: identity-service
  ECS_TASK_DEFINITION_NAME: uima-identity-service-deploy
  ECR_REPOSITORY_NAME: uima/identity-service
  ECR_IMAGE_TAG: latest
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

  docker:
    needs: build
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: dockeroo80/uima-identity-service
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: dockeroo80
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          
  ecr:
    needs: build

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push Image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: uima/identity-service
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  re-run-task:
    needs: ecr

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      if: steps.wait-for-ci.outputs.status == 'success'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Stop the running task
      if: steps.wait-for-ci.outputs.status == 'success'
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --service-name $ECS_SERVICE_NAME --desired-status RUNNING --query 'taskArns[0]' --output text)
        if [ ! -z "$TASK_ARN" ]; then
          aws ecs stop-task --task $TASK_ARN --cluster $ECS_CLUSTER_NAME
        fi

    - name: Run the updated task
      if: steps.wait-for-ci.outputs.status == 'success'
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --task-definition $ECS_TASK_DEFINITION_NAME:1
